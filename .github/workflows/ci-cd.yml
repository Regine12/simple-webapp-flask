name: CI/CD Pipeline  # Define the name of the workflow

on:
  push:
    branches:
      - main  # Trigger the workflow on any push to the main branch
  schedule:
    - cron: '0 0 * * *'  # Run the Trivy scan every day at midnight
  workflow_dispatch:  # Allow manual trigger of the workflow via the GitHub Actions UI

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment for the build

    steps:
      - name: Checkout code  # Step 1: Checkout the repository code
        uses: actions/checkout@v3  # Use the GitHub checkout action to pull the code from the repo

      - name: Set up Docker Buildx  # Step 2: Set up Docker Buildx for building multi-architecture Docker images
        uses: docker/setup-buildx-action@v2  # Use the Buildx action to allow advanced Docker image building

      - name: Log in to Docker Hub  # Step 3: Log in to Docker Hub using secrets
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Use a secret for the DockerHub username
          password: ${{ secrets.DOCKER_PASSWORD }}  # Use a secret for the DockerHub password

      - name: Build and push Docker image  # Step 4: Build and push the Docker image to DockerHub
        uses: docker/build-push-action@v2  # Use Docker build-push action to automate image building and pushing
        with:
          context: .  # The context is the current directory where Dockerfile is located
          push: true  # Push the Docker image to DockerHub
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-web-app:latest  # Tag the image with 'latest' for the DockerHub repo

      - name: Trivy scan for vulnerabilities  # Step 5: Run Trivy to scan the built image for vulnerabilities
        uses: aquasecurity/trivy-action@0.20.0  # Use the stable v0.29.2 Trivy action from Aqua Security
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/flask-web-app:latest  # Specify the image to scan (your built Docker image)
          format: 'table'  # Set the scan output format to 'table' for readability
          exit-code: '1'  # Set exit code to '1' if vulnerabilities are found to fail the workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use a GitHub token for authentication

  test:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the build job to finish first

    steps:
      - name: Checkout code  # Checkout the repository code again
        uses: actions/checkout@v3

      - name: Run Trivy scan  # Run Trivy in the test job to scan the Docker image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/flask-web-app:latest  # Use the image built in the 'build' job
          format: 'table'  # Output the scan in table format
          exit-code: '1'  # Fail the job if any vulnerabilities are found
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the GitHub token for authentication

  # Comment out or update the deploy job if you don't have a deployment process yet
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: test  # This job will run only if the 'test' job passes
  #
  #   steps:
  #     - name: Deploy to Kubernetes  # Placeholder for Kubernetes deployment steps
  #       # Add your steps here to deploy the Docker image to Kubernetes (if applicable)
