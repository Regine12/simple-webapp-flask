name: CI/CD Pipeline  # Define the name of the workflow

on:
  push:
    branches:
      - main  # Trigger the workflow on any push to the main branch
  schedule:
    - cron: '0 0 * * *'  # Run the Trivy scan every day at midnight
  workflow_dispatch:  # Allow manual trigger of the workflow via the GitHub Actions UI

jobs:
  build:
    name: Build and Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code  # Step 1: Checkout the repository code
        uses: actions/checkout@v4  # Use version 4 for the GitHub checkout action

      - name: Set up Docker Buildx  # Step 2: Set up Docker Buildx for multi-architecture builds
        uses: docker/setup-buildx-action@v2.6.0  # Updated version

      - name: Log in to Docker Hub  # Step 3: Log in to Docker Hub using GitHub secrets
        uses: docker/login-action@v2.4.0  # Updated version
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Reference DockerHub username secret
          password: ${{ secrets.DOCKER_PASSWORD }}  # Reference DockerHub password secret

      - name: Build Docker image  # Step 4: Build Docker image
        run: |
          docker build -t docker.io/${{ secrets.DOCKER_USERNAME }}/flask-web-app:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner  # Step 5: Run Trivy to scan built image for vulnerabilities
        uses: aquasecurity/trivy-action@0.20.0  # Use Trivy action v0.20.0
        with:
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/flask-web-app:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image to Docker Hub  # Step 6: Push the Docker image to DockerHub
        uses: docker/build-push-action@v2.6.0  # Updated version
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/flask-web-app:latest
            docker.io/${{ secrets.DOCKER_USERNAME }}/flask-web-app:${{ github.sha }}

  test:
    name: Test Trivy Scan Results
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code  # Checkout the repository for the test job
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scan again  # Step 2: Run another Trivy scan in test phase if needed
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/flask-web-app:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
